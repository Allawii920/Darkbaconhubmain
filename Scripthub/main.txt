local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Create Window
local Window = Fluent:CreateWindow({
    Title = "darkbacon hub | Car TrainingðŸš˜ðŸš—",
    SubTitle = " [ by darkbacon | Car Training ]",
    TabWidth = 160,
    Size = UDim2.fromOffset(700, 350),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Info = Window:AddTab({ Title = " â€¢ Info", Icon = "info" }),
    Main = Window:AddTab({ Title = " â€¢ Main", Icon = "home" }),
   -- Shop = Window:AddTab({  Title = " â€¢ Shop", Icon = "shopping-cart" }),
   -- Upgrade = Window:AddTab({ Title = "â€¢ Upgrade", Icon = "arrow-up"}),
    Egg = Window:AddTab({ Title = " â€¢ Egg", Icon = "egg"}),
    Misc = Window:AddTab({ Title = " â€¢ Misc", Icon = "dices"}),
    Creds = Window:AddTab({ Title = " â€¢ Credits", Icon = "book"})
}


local Section = Tabs.Creds:AddSection("Credits")

Tabs.Creds:AddParagraph({
    Title = "Credits",
    Content = "Credits to: Allwai.\nSocial links"
})

Tabs.Creds:AddButton({
    Title = "Copy Yt channel",
    Description = "Youtube channel",
    Callback = function()
        setclipboard("https://www.youtube.com/@Darkbacon-scripts")
    end
})
Tabs.Creds:AddButton({
    Title = "Copy Discord server",
    Description = "Discord server",
    Callback = function()
        setclipboard("https://discord.gg/GcbAzvW5")
    end
})


local Section = Tabs.Info:AddSection("Info")

-- Add Discord Button in Info Tab
Tabs.Info:AddParagraph({
    Title = "Join Discord",
    Content = "Join Discord for news!"
})

Tabs.Info:AddButton({
    Title = "Copy Invite",
    Description = "Discord server",
    Callback = function()
        setclipboard("https://discord.gg/GcbAzvW5")
    end
})

local executor = identifyexecutor and identifyexecutor() or "Unknown Executor"

Tabs.Info:AddParagraph({
    Title = "Your Executor is",
    Content = executor
})

Tabs.Info:AddParagraph({
    Title = "Info Read!",
    Content = "â€¢ All this is beta, this is a new version, new script.\n" ..
              "â€¢ I will add more features, I need time.\n" ..
              "â€¢ And don't forget to join my Discord server!!\n" ..
              "â€¢ DarkBacon Team Loves you.\n" ..
              "â€¢ Thank you for using DarkBacon!\n" ..
              "â€¢ I will make the script better!!\n"
})





local player = game:GetService("Players").LocalPlayer

-- Wait for leaderstats to load
local leaderstats = player:WaitForChild("leaderstats")
local energy = leaderstats:WaitForChild("Energy")
local wins = leaderstats:WaitForChild("Wins")

-- Variable to store the reference to the paragraph
local statsParagraph = nil

-- Date of the year
local Date = os.date("%A".." ".."%B".." ".."%d".." ".."%Y")


-- Function to create or update the stats paragraph
local function updateStats()
    -- If the paragraph already exists, clear the existing content (if possible)
    if statsParagraph then
        statsParagraph:Destroy()  -- Destroy the previous paragraph
    end

    -- Add a new paragraph with updated stats
    statsParagraph = Tabs.Info:AddParagraph({
        Title = "Status",
        Content = "Energy: " .. energy.Value .. "\nWins: " .. wins.Value .. "\nDate: " .. Date 
    })

    -- Wait briefly to ensure the UI refreshes properly
    wait(0.1)  -- Adjust the wait time if necessary
end

-- Initial update (first time the script runs)
updateStats()

-- Listen for changes in Energy and Wins, and update the paragraph
energy.Changed:Connect(updateStats)
wins.Changed:Connect(updateStats)



local Player = game.Players.LocalPlayer

-- Get the number of players in the game
local totalPlayers = #game.Players:GetPlayers()

-- Add a paragraph to display the player's status
Tabs.Info:AddParagraph({
    Title = "Player Status",
    Content = "You are: " .. Player.Name .. "\nPlayer ID: " .. Player.UserId .. "\nPlayers in game: " .. totalPlayers 
})







local Section = Tabs.Main:AddSection("Main Stuff")
local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Train", Default = false})

-- Initial arguments to send to the remote event
local args = {
    [1] = "Auto Train",
    [2] = false  -- Default state is off (false)
}

-- Store the player's original position
local player = game.Players.LocalPlayer
local savedPosition = nil

-- Fire the remote event with the initial state (false for off)
game:GetService("ReplicatedStorage").Remotes:FindFirstChild("Set Stat"):FireServer(unpack(args))

-- Function that runs when the toggle is changed
Toggle:OnChanged(function(state)
    -- Update the second argument based on the toggle state (true for on, false for off)
    args[2] = state
    
    -- Fire the "Set Stat" remote event with the updated state
    game:GetService("ReplicatedStorage").Remotes:FindFirstChild("Set Stat"):FireServer(unpack(args))

    -- If the toggle is turned off, also fire the "Dismount Treadmill" remote event
    if not state then
        -- Fire the Dismount Treadmill remote event
        game:GetService("ReplicatedStorage").Remotes:FindFirstChild("Dismount Treadmill"):FireServer()
        
        -- Return the player to the saved position if it exists
        if savedPosition then
            player.Character:SetPrimaryPartCFrame(savedPosition)
        end
    else
        -- If the toggle is turned on, save the current position of the player
        savedPosition = player.Character.HumanoidRootPart.CFrame
    end
end)


local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Race", Default = false})

Toggle:OnChanged(function(state)
    -- Prepare the arguments with the dynamic toggle state (on = true, off = false)
    local args = {
        [1] = "Auto Race",
        [2] = state  -- Use the state of the toggle (true for on, false for off)
    }

    -- Find the remotes
    local setStatRemote = game:GetService("ReplicatedStorage").Remotes:FindFirstChild("Set Stat")
    local joinRaceRemote = game:GetService("ReplicatedStorage").Remotes:FindFirstChild("Join Race")
    local leaveRaceRemote = game:GetService("ReplicatedStorage").Remotes:FindFirstChild("Leave Race")

    -- If the "Set Stat" remote exists, fire it with the arguments
    if setStatRemote then
        setStatRemote:FireServer(unpack(args))
    else
        warn("Set Stat remote not found!")
    end

    -- If the "Join Race" remote exists and the toggle is on, fire it
    if joinRaceRemote and state then
        joinRaceRemote:FireServer()
    elseif leaveRaceRemote and not state then
        -- If the toggle is off, fire the "Leave Race" remote
        leaveRaceRemote:FireServer()
    else
        -- If the "Join Race" remote exists but toggle is off, we don't need to do anything
        warn("Join Race remote not found or toggle is off!")
    end
end)




-- AutoFarm: 
local Values = {"1", "5", "20", "50", "100", "400", "1k", "5k", "25k", "75k", "200k", "500k", "2M", "25M", "100M", "1B", "50B", "500B", "50T", "500T", "5Qd", "50Qd", "500Qd", "5Qn", "50Qn", "500Qn", "5Sx", "50Sx"}

local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
    Title = "Select a rebirth to rebirth",
    Values = Values,
    Multi = false,
    Default = nil,
})


local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Selected rebirth", Default = false })

local selectedRebirth = nil  -- Variable to store the selected rebirth amount

-- Function to start spamming rebirths
local function startSpamming()
    while Toggle.Value do
        if selectedRebirth then
            local args = {
                [1] = selectedRebirth
            }
            game:GetService("ReplicatedStorage").Remotes.Rebirth:InvokeServer(unpack(args))
        end
        wait(0.1)  -- Adjust this delay to control how fast the rebirths are sent (e.g., 0.1 = 10 times per second)
    end
end

Dropdown:OnChanged(function(Value)
    -- Convert the value to an integer
    if Value == "1" then
        selectedRebirth = 1
    elseif Value == "5" then
        selectedRebirth = 2
    elseif Value == "25" then
        selectedRebirth = 3
    elseif Value == "50" then
        selectedRebirth = 4
    elseif Value == "100" then
        selectedRebirth = 5
    elseif Value == "400" then
        selectedRebirth = 6
    elseif Value == "1k" then
        selectedRebirth = 7
    elseif Value == "5k" then
        selectedRebirth = 8
    elseif Value == "25k" then
        selectedRebirth = 9
    elseif Value == "75k" then
        selectedRebirth = 10
    elseif Value == "200k" then
        selectedRebirth = 11
    elseif Value == "500k" then
        selectedRebirth = 12
    elseif Value == "2M" then
        selectedRebirth = 13
   elseif Value == "25M" then
        selectedRebirth = 14
   elseif Value == "100M" then
        selectedRebirth = 15
   elseif Value == "1B" then
        selectedRebirth = 16
    elseif Value == "50B" then
        selectedRebirth = 17
    elseif Value == "500B" then
        selectedRebirth = 18
    elseif Value == "50T" then
        selectedRebirth = 19
    elseif Value == "500T" then
        selectedRebirth = 20
    elseif Value == "5Qd" then
        selectedRebirth = 21
    elseif Value == "50Qd" then
        selectedRebirth = 22
    elseif Value == "500Qd" then
        selectedRebirth = 23
    elseif Value == "5Qn" then
        selectedRebirth = 24
    elseif Value == "50Qn" then
        selectedRebirth = 25
    elseif Value == "500Qn" then
        selectedRebirth = 26
    elseif Value == "5Sx" then
        selectedRebirth = 27
    elseif Value == "50Sx" then
        selectedRebirth = 28
    end
end)

Toggle:OnChanged(function(isToggled)
    if isToggled then
        -- Start the spamming loop if the toggle is turned on
        spawn(startSpamming)
    end
end)


-- local Section = Tabs.Upgrade:AddSection("Upgrade")




local Section = Tabs.Misc:AddSection("Misc")
local player = game.Players.LocalPlayer
local Toggle = Tabs.Misc:AddToggle("Toggle", { Title = "Free Auto Rebirth pass", Default = false })

local replicatedStorage = game:GetService("ReplicatedStorage")
local stats = replicatedStorage:WaitForChild("Stats")
local playerStats = stats:WaitForChild(player.Name)  -- Access the player's stats using their name

-- Ensure the player has a Gamepasses folder
local gamepasses = playerStats:WaitForChild("Gamepasses")
local autoRebirthPass = gamepasses:WaitForChild("AutoRebirthPass")

-- Set the initial value of AutoRebirthPass based on the toggle default state
autoRebirthPass.Value = Toggle.Default

-- When the toggle is changed, update the AutoRebirthPass value
Toggle:OnChanged(function(isOn)
    autoRebirthPass.Value = isOn
end)

local Toggle = Tabs.Misc:AddToggle("Toggle", { Title = "Auto Claim Reward", Default = false })

local claimingReward = false

-- Function to claim the reward
local function claimReward()
    game:GetService("ReplicatedStorage").Remotes:FindFirstChild("Claim Reward"):InvokeServer()
end

Toggle:OnChanged(function(isOn)
    if isOn then
        -- Start claiming reward continuously when the toggle is on
        claimingReward = true
        while claimingReward do
            claimReward()
            wait(1)  -- Adjust the wait time as necessary to avoid overloading the server
        end
    else
        -- Stop claiming reward when the toggle is off
        claimingReward = false
    end
end)


-- List of achievements
local Achievements = {
    "Runes", "Energy", "TimePlayed", "Laps", "Eggs", "RainbowCrafted", "Wins",
    "MerchantBuys", "PetEnchants", "Secrets", "PotionsUsed", "GoldenCrafted", "Essence"
}

-- Initialize the toggle for Auto Upgrade
local Toggle = Tabs.Misc:AddToggle("Toggle", { Title = "Auto Achievements", Default = false })

-- Variable to keep track of whether the achievement spamming loop is active
local isSpamming = false

-- Function to handle achievement level increments
local function handleAchievements(state)
    if state then
        isSpamming = true
        while isSpamming do
            for _, achievement in ipairs(Achievements) do
                -- Loop through levels 1 to 10 for each achievement
                for level = 1, 10 do
                    local args = {
                        [1] = achievement,  -- Achievement name (e.g., "Energy")
                        [2] = level         -- Achievement level (1 to 10)
                    }

                    -- Send the achievement level to the server
                    game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer(unpack(args))

                    -- Small delay between achievement increments to avoid spamming too quickly
                    wait(0.1)  -- Adjust this delay as necessary
                end
            end
            wait(1)  -- Adjust this wait time before starting the next round
        end
    else
        isSpamming = false  -- Stop spamming when the toggle is off
    end
end

-- Handle toggle state changes (on/off)
Toggle:OnChanged(function(state)
    if state then
        -- Start spamming achievements if toggle is on
        spawn(function() handleAchievements(true) end)
    else
        -- Stop spamming achievements when toggle is off
        isSpamming = false
    end
end)

local VirtualUser = game:GetService('VirtualUser')
local Players = game:GetService("Players")
local Toggle = Tabs.Misc:AddToggle("MyToggle", { Title = "Auto AFK", Default = false })

local afkEnabled = false
local afkThread = nil -- To hold the thread reference

-- Function to enable AFK
local function enableAFK()
    while afkEnabled do
        wait(600) -- Make this repeat every 10 minutes (600 seconds)
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new()) -- Simulate a click to avoid AFK kick
    end
end

-- Toggle function that enables or disables AFK behavior
Toggle:OnChanged(function(value)
    afkEnabled = value  -- Set the value based on toggle state
    
    if afkEnabled then
        if not afkThread then
            afkThread = spawn(enableAFK) -- Start the AFK loop in a new thread
        end
    else
        afkEnabled = false -- Stop AFK
        if afkThread then
            afkThread = nil -- Terminate the thread when AFK is disabled
        end
    end
end)




Tabs.Misc:AddButton({
    Title = "Destroy script",
    Description = "Destroy script",
    Callback = function()
        Fluent:Destroy()
    end
})



local Section = Tabs.Misc:AddSection("Music")
local Input = Tabs.Misc:AddInput("Input", {
Title = "Input Audio", 
Default = "rbxassetid://1848354536", 
Placeholder = "rbxassetid://ID",
Numeric = false, Finished = false})
Input:OnChanged(function(Value)
    _G.AudioID = Value
end)

print("Audio For you and working")
print("1837879082")
print("142376088")
print("9045766377")
print("123150365153422")
print("1843404009")

local Toggle = Tabs.Misc:AddToggle("MyToggle", {Title = "Loop Audio", Default = false })
Toggle:OnChanged(function(Value)
    _G.AudioLooped = Value
end)

local Slider = Tabs.Misc:AddSlider("Slider", {Title = "Volume Audio", Description = "", Default = 10, Min = 0, Max = 20, Rounding = 1})
Slider:OnChanged(function(Value)
    _G.AudioVolume = Value
end)

Tabs.Misc:AddButton({ Title = "Play Audio", Description = "", Callback = function()
    local Sound = Instance.new('Sound',workspace)
    Sound.Volume = _G.AudioVolume
    Sound.Looped = _G.AudioLooped
    Sound.SoundId = _G.AudioID
    if not Sound:Play() then
        Sound:Play()
    end
end})

Tabs.Misc:AddButton({ Title = "Stop Audio", Description = "", Callback = function()
    if game:GetService("Workspace"):FindFirstChild("Sound") then
        game:GetService("Workspace").Sound:Destroy()
    end
end})





-- local Section = Tabs.Shop:AddSection("Shop")







local Section = Tabs.Egg:AddSection("Egg")

-- Dropdown for selecting the egg to hatch
local EggDropdown = Tabs.Egg:AddDropdown("Egg Dropdown", {
    Title = "Select Egg",
    Description = "Select the Egg to Hatch",
    Values = {
        "Angelic Egg", 
        "Aqua Egg", 
        "Basic Egg", 
        "Beach Egg", 
        "Cave Egg", 
        "Cyber Egg", 
        "Fantasy Egg", 
        "Galaxy Egg", 
        "Lava Egg", 
        "Magic Egg", 
        "Rare Egg", 
        "Sakura Egg", 
        "Sand Egg", 
        "Snow Egg", 
        "Steam Egg", 
        "Sunny Egg", 
        "Swamp Egg", 
        "TNT Egg", 
        "Toy Egg", 
        "Wood Egg"
    },
    Multi = false,
    Default = nil,
})

-- Dropdown for selecting the quantity of eggs
local AmountDropdown = Tabs.Egg:AddDropdown("Amount Dropdown", {
    Title = "Select Amount",
    Description = "How much Eggs you want to hatch?",
    Values = {"1", "3"},
    Multi = false,
    Default = nil,
})

-- Toggle for enabling/disabling Auto Hatch
local Toggle = Tabs.Egg:AddToggle("Auto Hatch", { Title = "Auto Hatch", Default = false })

-- Variable to manage auto hatch state
local autoHatching = false

Toggle:OnChanged(function(state)
    autoHatching = state  -- Update the autoHatching state based on the toggle's state

    -- When the toggle is turned on
    if autoHatching then
        -- Get the selected egg name and quantity from the dropdowns
        local selectedEgg = EggDropdown.Value  -- Get selected egg name (accessing the Value directly)
        local eggQuantity = tonumber(AmountDropdown.Value)  -- Get selected quantity of eggs (accessing Value directly)

        -- Start the auto hatching process (repeatedly buy eggs based on selected quantity)
        while autoHatching do
            -- Trigger the server function to buy the egg with the selected name and quantity
            local args = {
                [1] = selectedEgg,  -- Egg name (from the egg dropdown)
                [2] = eggQuantity   -- Quantity of eggs (from the amount dropdown)
            }

            -- Make the server call to buy the eggs only once per loop iteration
            game:GetService("ReplicatedStorage").Remotes:FindFirstChild("Buy Egg"):InvokeServer(unpack(args))

            -- Wait a brief moment before repeating the process (adjust delay as needed)
            wait(2)  -- Example: wait for 2 seconds before the next hatch
        end
    end
end)

local Section = Tabs.Egg:AddSection("Pet Managment")

local Toggle = Tabs.Egg:AddToggle("MyToggle", { Title = "Auto Equip best pets", Default = false })

Toggle:OnChanged(function(isOn)
    if isOn then
        -- While the toggle is ON, keep equipping the best pets
        local args = {
            [1] = {
                ["Action"] = "EquipBest"
            }
        }
        
        -- Calling the server to equip the best pets
        game:GetService("ReplicatedStorage").Remotes.Pet:InvokeServer(unpack(args))
    end
end)


local Section = Tabs.Egg:AddSection("Crafting")

local Toggle = Tabs.Egg:AddToggle("MyToggle", { Title = "Auto Craft", Default = false })

Toggle:OnChanged(function(isOn)
    if isOn then
        -- When the toggle is ON, start crafting continuously
        while isOn do
            game:GetService("ReplicatedStorage").Remotes:FindFirstChild("Craft All"):InvokeServer()
            wait(1)  -- Wait for 1 second before crafting again
        end
    end
end)







local Player = game.Players.LocalPlayer

---[Notify user]---
Fluent:Notify({
    Title = "Notification",
    Content = "You have Executed this Script. Thank you for choosing us! " .. Player.Name,
    SubContent = "SubContent", -- Optional
    Duration = 15 -- Set to nil to make the notification not disappear
})



Window:SelectTab(1)


     ---[close gui anf open]---
local ScreenGui = Instance.new("ScreenGui")
local ImageButton = Instance.new("ImageButton")
local UICorner = Instance.new("UICorner")
local TextLabel = Instance.new("TextLabel")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

ImageButton.Parent = ScreenGui
ImageButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)  -- Black background for ImageButton
ImageButton.BorderSizePixel = 0
ImageButton.Position = UDim2.new(0.120833337, 0, 0.0952890813, 0)
ImageButton.Size = UDim2.new(0, 50, 0, 50)  -- Adjusted size to fit the text
ImageButton.Draggable = true
ImageButton.Image = ""  -- Empty image (black background will be used)

-- Add a TextLabel to display "DarkBacon"
TextLabel.Parent = ImageButton
TextLabel.Text = "DarkBacon"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White text
TextLabel.TextSize = 8
TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
TextLabel.Position = UDim2.new(0.5, 0, 0.5, 0)  -- Centered text
TextLabel.BackgroundTransparency = 1  -- No background for the text
TextLabel.Size = UDim2.new(1, 0, 1, 0)  -- Fill the entire ImageButton

-- Add a corner radius for the ImageButton (optional)
UICorner.Parent = ImageButton

ImageButton.MouseButton1Down:connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.LeftControl, false, game)
end)
